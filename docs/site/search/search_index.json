{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Authentication To authenticate with mafia you need to pass cookies with your POST requests Method Description GET Fetch resource POST Send data Getting the cookie Make a POST request to: https://mafia.gg/api/user-session with the payload 1 2 3 4 { logi n : user na me password : password } Store the resulting cookie from the reponse Example Python 1 2 3 4 5 from requests import Session with Session () as s : cookie = s . post ( URL , json = { 'login' : username ), 'password' : password }) cookie = response . cookies . get_dict ()","title":"Authentication"},{"location":"#authentication","text":"To authenticate with mafia you need to pass cookies with your POST requests Method Description GET Fetch resource POST Send data","title":"Authentication"},{"location":"#getting-the-cookie","text":"Make a POST request to: https://mafia.gg/api/user-session with the payload 1 2 3 4 { logi n : user na me password : password } Store the resulting cookie from the reponse","title":"Getting the cookie"},{"location":"#example","text":"Python 1 2 3 4 5 from requests import Session with Session () as s : cookie = s . post ( URL , json = { 'login' : username ), 'password' : password }) cookie = response . cookies . get_dict ()","title":"Example"},{"location":"deck/","text":"Deck Get all decks Make a GET request to https://mafia.gg/api/decks?filter&page=PAGENUM PAGENUM - Page to return (see numPages for total) Response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 { pagination : { page : int , numPages : int , total : int }, decks : [ { name : str , version : int , key : str , builtin : bool , deckSize : int , uploadTimestamp : timestamp ( int ), sampleCharacters : [ { playerId : int , name : str , avatarUrl : asset ( str ), backgroundColor : hex ( str ) }, ... ] } Get a deck by ID Make a GET request to https://mafia.gg/api/decks/deck_id See the key key of previous response Response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 { name : str , version : int , key : str , builtin : bool , deckSize : int , uploadTimestamp : int , characters : [ { playerId : int , name : str , avatarUrl : asset ( str ), backgroundColor : hex ( str ) }, ... ] }","title":"Deck"},{"location":"deck/#deck","text":"","title":"Deck"},{"location":"deck/#get-all-decks","text":"Make a GET request to https://mafia.gg/api/decks?filter&page=PAGENUM PAGENUM - Page to return (see numPages for total) Response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 { pagination : { page : int , numPages : int , total : int }, decks : [ { name : str , version : int , key : str , builtin : bool , deckSize : int , uploadTimestamp : timestamp ( int ), sampleCharacters : [ { playerId : int , name : str , avatarUrl : asset ( str ), backgroundColor : hex ( str ) }, ... ] }","title":"Get all decks"},{"location":"deck/#get-a-deck-by-id","text":"Make a GET request to https://mafia.gg/api/decks/deck_id See the key key of previous response Response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 { name : str , version : int , key : str , builtin : bool , deckSize : int , uploadTimestamp : int , characters : [ { playerId : int , name : str , avatarUrl : asset ( str ), backgroundColor : hex ( str ) }, ... ] }","title":"Get a deck by ID"},{"location":"ping/","text":"Ping Sent to wss://mafia.gg/engine after creating a room Request 1 { \"type\" : \"ping\" } Response 1 { \"type\" : \"pong\" , \"timestamp\" : timestamp ( int ), \"sid\" : int }","title":"Ping"},{"location":"ping/#ping","text":"Sent to wss://mafia.gg/engine after creating a room Request 1 { \"type\" : \"ping\" } Response 1 { \"type\" : \"pong\" , \"timestamp\" : timestamp ( int ), \"sid\" : int }","title":"Ping"},{"location":"room/","text":"Room A GET request to https://mafia.gg/api/rooms returns a JSON response of all the rooms 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 rooms : [ { id : str , name : str , hasStarted : bool , playerCount : int , setupSize : int , hostUser : { id : int , username : str , activePatreon : bool , createdAt : timestamp }, createdAt : timestamp }, .. ] Creating a room Make a POST request to: https://mafia.gg/api/rooms with the payload 1 2 3 4 { 'name' : str , 'unlisted' : bool } This returns a JSON response with the ID of the room 1 2 3 { id : str } The room url would be https://mafia.gg/game/id Now make a POST to https://mafia.gg/api/rooms/id with user cookie Python 1 2 3 4 from requests import Session with Session () as s : resp = loads ( s . get ( f \"https://mafia.gg/api/rooms/ { id } \" , cookies = cookie ) . content ) engine , auth = resp [ 'engineUrl' ], resp [ 'auth' ] The resulting JSON reponse has an auth string as well as an engineUrl to which you'll be making a websocket connection to Python 1 2 import websockets ws = await websockets . connect ( URL ) Create a payload 1 2 3 4 5 6 { ' t ype' : 'clie nt Ha n dshake' , 'userId' : user_id , 'roomId' : room_id , 'au t h' : au t h } Send to websocket Python 1 2 from json import dumps await ws . send ( dumps ( payload )) Creating a new room Repeat the previous steps Send this payload 1 { ' t ype' : ' ne wGame' , 'roomId' : room_id }","title":"Room"},{"location":"room/#room","text":"A GET request to https://mafia.gg/api/rooms returns a JSON response of all the rooms 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 rooms : [ { id : str , name : str , hasStarted : bool , playerCount : int , setupSize : int , hostUser : { id : int , username : str , activePatreon : bool , createdAt : timestamp }, createdAt : timestamp }, .. ]","title":"Room"},{"location":"room/#creating-a-room","text":"Make a POST request to: https://mafia.gg/api/rooms with the payload 1 2 3 4 { 'name' : str , 'unlisted' : bool } This returns a JSON response with the ID of the room 1 2 3 { id : str } The room url would be https://mafia.gg/game/id Now make a POST to https://mafia.gg/api/rooms/id with user cookie Python 1 2 3 4 from requests import Session with Session () as s : resp = loads ( s . get ( f \"https://mafia.gg/api/rooms/ { id } \" , cookies = cookie ) . content ) engine , auth = resp [ 'engineUrl' ], resp [ 'auth' ] The resulting JSON reponse has an auth string as well as an engineUrl to which you'll be making a websocket connection to Python 1 2 import websockets ws = await websockets . connect ( URL ) Create a payload 1 2 3 4 5 6 { ' t ype' : 'clie nt Ha n dshake' , 'userId' : user_id , 'roomId' : room_id , 'au t h' : au t h } Send to websocket Python 1 2 from json import dumps await ws . send ( dumps ( payload ))","title":"Creating a room"},{"location":"room/#creating-a-new-room","text":"Repeat the previous steps Send this payload 1 { ' t ype' : ' ne wGame' , 'roomId' : room_id }","title":"Creating a new room"},{"location":"user/","text":"User https://mafia.gg/api/user Your info Response (requires auth) 1 2 3 4 5 6 7 8 9 10 { id : int , username : str , email : str , hostBannedUsernames : list , isPatreonLinked : bool , activePatreon : bool , needsVerification : false , createdAt : timestamp } https://mafia.gg/api/users/user_id Find user by ID Response (no auth) 1 2 3 4 5 6 7 8 [ { id : int , username : str , activePatreon : bool , createdAt : timestamp } ]","title":"User"},{"location":"user/#user","text":"https://mafia.gg/api/user","title":"User"},{"location":"user/#your-info","text":"Response (requires auth) 1 2 3 4 5 6 7 8 9 10 { id : int , username : str , email : str , hostBannedUsernames : list , isPatreonLinked : bool , activePatreon : bool , needsVerification : false , createdAt : timestamp } https://mafia.gg/api/users/user_id","title":"Your info"},{"location":"user/#find-user-by-id","text":"Response (no auth) 1 2 3 4 5 6 7 8 [ { id : int , username : str , activePatreon : bool , createdAt : timestamp } ]","title":"Find user by ID"}]}